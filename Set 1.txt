1. [FOLD] Create a function that concatenates a list of strings

fun concat(l :: List<String>) -> String:
  fold(lam(acc,curr): acc + curr end, "", l)
where:
  concat([list: "t", "e", "s", "ting"]) is "testing"
  concat([list: ]) is ""
end

2. [FOLD] Create a function that finds the minimum of a list of numbers.

fun min(n :: List<Number>):
  if n == [list:]: 0
  else:
    fold(lam(acc,curr):
        if acc.first > curr:
          link(curr, acc)
        else:
          acc
        end
      end, [list:n.first], n).first
  end
where:
  min([list:]) is 0
  min([list: 5, 4, 3, 2]) is 2
  min([list: 5, 6, 7, 10]) is 5
  min([list: 1, 2, -3]) is -3
end

3. [FOLD] Create a function that counts the number of vowels in a string.

fun vow-count(l :: String) -> Number:
  if l == "": 0
  else:
    fold(lam(acc,curr):
        if (curr == "a") or (curr == "e") or (curr == "i") or (curr == "o")
          or (curr == "u"):
          acc + 1
        else: acc end
      end, 0, string-explode(l))
  end
where:
  vow-count("testing") is 2
  vow-count("aaee") is 4
  vow-count("bbb") is 0
  vow-count("") is 0
end

(2nd Approach)
fun vow-count(l :: String) -> Number:
  fold(lam(acc,curr):
      if string-contains("aeiou", curr):
        acc + 1
      else: acc end
      end, 0, string-explode(l))
where:
  vow-count("testing") is 2
  vow-count("aaee") is 4
  vow-count("bbb") is 0
  vow-count("") is 0
end

4. [Fold] Create a function that performs AND on a list: Return true if all boolean values in a 
    list are true

fun and-list(l :: List<Boolean>) -> Boolean:
  if l == [list:]: false
  else:
    fold(lam(acc,curr):
        curr and acc
      end, l.first, l)
  end
where:
  and-list([list:]) is false
  and-list([list: true, true]) is true
  and-list([list: false, false]) is false
  and-list([list: false, true]) is false
end

5. [Fold] Create a function that performs OR on a list: Return true if all boolean values in a 
    list are true

fun or-list(l :: List<Boolean>) -> Boolean:
  if l == [list:]: false
  else:
    fold(lam(acc,curr):
        acc or curr
      end, l.first, l)
  end
where:
  or-list([list:]) is false
  or-list([list: true, true]) is true
  or-list([list: false, true]) is true
  or-list([list: false, false]) is false
end

6. [Filter] Create a function that accepts a list A and a number N and produces a list of 
    all numbers from A that are divisible by N

fun sort-n-div(a :: List<Number>, n :: Number) -> List<Number>:
  if a == [list:]: [list:]
  else:
    filter(lam(e): num-modulo(e,n) == 0 end, a)
  end
where:
  sort-n-div([list:], 2) is [list: ]
  sort-n-div([list:1,2,3,4,5], 2) is [list:2,4]
  sort-n-div([list:6,7,8,9,10],3) is [list:6,9]
end

(To be updated)
fun remove-dumps(a :: List):
  if a == [list:]: [list:]
  else:
    fold(lam(acc,curr):
        if acc.first <> curr:
          link(curr, acc)
        else:
          acc
        end
      end, [list:a.first], a).reverse()
  end
where:
  remove-dumps([list: ]) is [list:]
  remove-dumps([list:1,2,2,3,3,3,4,4]) is [list:1,2,3,4]
  remove-dumps([list:'a','b','b','c','c','c','d','d']) is [list:'a','b','c','d']
end

8. [Fold] Create a function that flattens nested sublists, into a single lists

fun flatten(f :: List) -> List:
  fold(lam(acc,curr):
    acc + curr end, empty, f)
where:
  flatten([list: ]) is [list: ]
  flatten([list:[list: 1, 2], [list: 3, 4], [list: ], [list: 5]]) 
    is [list: 1, 2, 3, 4, 5]
end

9. [Filter] Create a function that given a list of filenames and a file extension,
    filter those with supplied extension

fun file-st(f :: List<String>, key :: String) -> List<String>:
  if f == [list:]: [list:]
  else if key == "": f
  else:
    fold(lam(acc,curr):
        if string-contains(curr, key):
          link(curr,acc)
        else:
          acc
        end
      end, empty, f).reverse()
  end
where:
  file-st([list:], ".txt") is [list:]
  file-st([list:"f.txt", "g.exe", "z.exe"], "") is [list: "f.txt", "g.exe", "z.exe"]
  file-st([list:"f.txt", "g.txt", "h.txt"], "txt") is [list: "f.txt","g.txt","h.txt"]
  file-st([list:"f.txt", "g.exe", "z.exe"], "txt") is [list: "f.txt"]
  file-st([list:"f.txt", "g.exe", "z.exe"], "pdf") is [list: ]
end

10. [Fold] Given a list containing sublists of name-age pairs, produce a list of just the names

fun just-names(f :: List) -> List:
  if f == [list:]: [list:]
  else:
    fold(lam(acc,curr):
      acc + [list: curr.get(0)] end, empty, f)
  end
where:
  just-names([list: [list: "John", 16], [list: "George", 18], [list:"Paul", 17]]) 
    is [list: "John", "George", "Paul"]
end








